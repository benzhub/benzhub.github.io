<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2024/01 on BenzHub</title><link>https://benzhub.github.io/archives/2024/01/</link><description>Recent content in 2024/01 on BenzHub</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://benzhub.github.io/archives/2024/01/index.xml" rel="self" type="application/rss+xml"/><item><title> this | Javascript</title><link>https://benzhub.github.io/post/javascript/032-this/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/032-this/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>JavaScript&lt;/strong> 中的 &lt;strong>this&lt;/strong> 既強大又神秘，常常讓開發人員感到困惑。我們將用範例深入探討 &lt;strong>this&lt;/strong> 在不同情境中的運作方式。&lt;/p>
&lt;/blockquote></description></item><item><title> Variable Hoisting and Temporal Dead Zone | Javascript</title><link>https://benzhub.github.io/post/javascript/031-variable-hoisting/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/031-variable-hoisting/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Hoisting&lt;/strong> 和 &lt;strong>Temporal Dead Zone(TDZ)&lt;/strong> 影響 &lt;strong>JavaScript&lt;/strong> 中的變量聲明和初始化。 &lt;strong>var&lt;/strong> . &lt;strong>let&lt;/strong> . &lt;strong>const&lt;/strong> 有各自不同的 &lt;strong>Hoisting&lt;/strong> 和 &lt;strong>TDZ&lt;/strong> 情境，這篇文章將會深入介紹這些的細節。&lt;/p>
&lt;/blockquote></description></item><item><title>JavaScript作用域(Scope) | Javascript</title><link>https://benzhub.github.io/post/javascript/030-javascript-scope/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/030-javascript-scope/</guid><description>&lt;blockquote>
&lt;p>作用域(Scope)代表你宣告的變數可以在哪些區域作用， &lt;strong>JavaScript&lt;/strong> 新手開發人員常常會因為變數作用域在錯誤的區域使用變數，而造成許多隱密的bug。&lt;/p>
&lt;/blockquote></description></item><item><title>Primitive vs. Reference Types | Javascript</title><link>https://benzhub.github.io/post/javascript/033-primitive-reference/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/033-primitive-reference/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>JavaScript&lt;/strong> 是一種動態且多用途的編程語言，數據基本有2種類型: &lt;strong>原始類型&lt;/strong> 和 &lt;strong>參考類型&lt;/strong> 。&lt;/p>
&lt;/blockquote></description></item><item><title>淺拷貝 vs. 深拷貝 (Shallow Copy vs. Deep Copy) | Javascript</title><link>https://benzhub.github.io/post/javascript/034-shallow-copy-vs-deep-copy/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/034-shallow-copy-vs-deep-copy/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>JavaScript&lt;/strong> 中，複製對象和陣列是一個常見的任務，但複製的方法可能導致意外的行為。淺拷貝和深拷貝是兩種不同的方法，各自具有其優勢和用例。&lt;/p>
&lt;/blockquote></description></item><item><title>陣列解構(Destructuring Arrays) | Javascript</title><link>https://benzhub.github.io/post/javascript/035-destructuring-arrays/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/035-destructuring-arrays/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>JavaScript&lt;/strong> 陣列解構(Destructuring Arrays)是一個強大的功能，允許開發人員以優雅和簡潔的方式從陣列中提取值，它簡化了代碼，使其更直觀且更易讀。&lt;/p>
&lt;/blockquote></description></item><item><title>JavaScript引擎和執行的深度剖析 |</title><link>https://benzhub.github.io/post/javascript/029-javascript-engine-and-runtime/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/029-javascript-engine-and-runtime/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>JavaScript&lt;/strong> 引擎和運行(JavaScript Engine and Runtime)是執行和管理 &lt;strong>JavaScript&lt;/strong> 代碼的核心組件。我們介紹各元件的複雜性，闡明它們如何共同工作，使 &lt;strong>JavaScript&lt;/strong> 高效又完美的執行。&lt;/p>
&lt;/blockquote></description></item><item><title>Linux or Mac 安裝 nvm(Node.js 的版本管理器) | Javascript</title><link>https://benzhub.github.io/post/javascript/024-linux-or-mac-install-nvm-copy/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/024-linux-or-mac-install-nvm-copy/</guid><description>&lt;blockquote>
&lt;p>管理 &lt;strong>Node.js&lt;/strong> 版本對很多人來說是一場惡夢，但使用 &lt;strong>nvm&lt;/strong> （Node.js版本管理器），這個過程變得簡單而高效。我們將介紹如何在Linux和Mac OS 系統安裝 &lt;strong>nvm&lt;/strong> ，使他們能夠輕鬆切換 &lt;strong>Node.js&lt;/strong> 版本。&lt;/p>
&lt;/blockquote></description></item><item><title>事件處理(Handling Events) | Javascript</title><link>https://benzhub.github.io/post/javascript/026-handling-click-events/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/026-handling-click-events/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>JavaScript&lt;/strong> 中，事件驅動允許開發者創建與使用者互動的網頁。&lt;/p>
&lt;/blockquote></description></item><item><title>什麼是 nvm、npm、Node.js | Javascript</title><link>https://benzhub.github.io/post/javascript/023-whats-nvm-npm-nodejs/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/023-whats-nvm-npm-nodejs/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Node.js&lt;/strong> 已成為現代Web開發的基石，其生態系統包括 &lt;strong>npm&lt;/strong> （Node包管理器）和 &lt;strong>nvm&lt;/strong> （Node版本管理器）等重要工具。理解 &lt;strong>Node.js&lt;/strong> 、 &lt;strong>npm&lt;/strong> 和 &lt;strong>nvm&lt;/strong> 之間的關係對於乾淨的套件管理和版本控制非常重要。&lt;/p>
&lt;/blockquote></description></item><item><title>使用javascript改變CSS style | Javascript</title><link>https://benzhub.github.io/post/javascript/027-changing-css-styles/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/027-changing-css-styles/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>JavaScript&lt;/strong> 使開發人員能夠動態更改HTML元素和修改CSS樣式。&lt;/p>
&lt;/blockquote></description></item><item><title>按鍵事件處理(Handling Keypress Events) | Javascript</title><link>https://benzhub.github.io/post/javascript/028-handling-keypress-events/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/028-handling-keypress-events/</guid><description>&lt;blockquote>
&lt;p>我們將在這篇文章中介紹 &lt;strong>JavaScript&lt;/strong> 中按鍵事件處理的方式。&lt;/p>
&lt;/blockquote></description></item><item><title>選擇元素(Selecting DOM Elements) | Javascript</title><link>https://benzhub.github.io/post/javascript/025-selecting-dom-elements/</link><pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/025-selecting-dom-elements/</guid><description>&lt;blockquote>
&lt;p>在DOM（文檔對象模型）中選擇元素是 &lt;strong>JavaScript&lt;/strong> 開發人員的基本技能。透過操作HTML元素，讓我們的網頁增加更多靈活的互動性。我們將介紹使用 &lt;strong>JavaScript&lt;/strong> 選擇元素的不同方法。&lt;/p>
&lt;/blockquote></description></item></channel></rss>