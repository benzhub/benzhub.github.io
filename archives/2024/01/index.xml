<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2024/01 on BenzHub</title>
    <link>https://benzhub.github.io/archives/2024/01/</link>
    <description>Recent content in 2024/01 on BenzHub</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://benzhub.github.io/archives/2024/01/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>nvm 常用指令一覽表 | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/055-nvm-commands/</link>
      <pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/055-nvm-commands/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;以下是我整理的，最常使用的nvm 指令一覽表&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>nvm 是什麼，到底在哪裡會用到，怎麼用?</title>
      <link>https://benzhub.github.io/post/javascript/052-whats-nvm/</link>
      <pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/052-whats-nvm/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;NVM 是一個常見的網路用語，有兩種主要的含義：&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;英文縮寫&lt;/li&gt;&#xA;&lt;li&gt;Node 版本管理器&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Windows 上安裝 NVM | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/053-how-to-install-nvm-in-windows-copy/</link>
      <pubDate>Fri, 08 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/053-how-to-install-nvm-in-windows-copy/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;NVM (Node Version Manager) 主要支援 Linux 和 Mac 系統。 雖然 Windows 不支援 NVM，但有一個名為 &lt;strong&gt;nvm-windows&lt;/strong&gt; 的工具，由 coreybutler 開發，可在 Windows 上提供類似的 NVM 體驗。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>你非使用 NVM 管理不同 Node.js 版本的根本原因 | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/054-whats-the-reason-you-must-use-nvm/</link>
      <pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/054-whats-the-reason-you-must-use-nvm/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;許多人會說不一定要使用nvm去管理不同的node.js版本，但其實在工作職場上，我們大部分時候是要去維護已經存在的專案，這時候就可以知道nvm對於管理眾多不同node.js版本的重要性了&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Django Choice Fields - 在模型中添加選擇欄位 | Django</title>
      <link>https://benzhub.github.io/post/django/002-choice-fields/</link>
      <pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/django/002-choice-fields/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Django&lt;/strong&gt; 模型中，有時候我們需要限制某一個字段的值，只允許它在一組特定的選項中取值。這時， &lt;strong&gt;Django&lt;/strong&gt; 的 &lt;strong&gt;Choice Fields&lt;/strong&gt; 就派上用場了。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Linux Cron Job的使用及時間格式 | Linux</title>
      <link>https://benzhub.github.io/post/linux/022-cron-job/</link>
      <pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/022-cron-job/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Linux&lt;/strong&gt; 系統中， &lt;strong&gt;Cron Job&lt;/strong&gt; 是一個非常強大且常用的工具，用於執行定期或定時任務。透過 &lt;strong&gt;Cron Job&lt;/strong&gt; ，我們可以輕鬆地自動化重複性的任務，如備份數據、定時執行腳本等。本篇將介紹 &lt;strong&gt;Cron Job&lt;/strong&gt; 的基本使用方法以及時間格式的說明，並提供簡單易懂的範例供參考。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>創建模型(Models) | Django</title>
      <link>https://benzhub.github.io/post/django/001-creating-models/</link>
      <pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/django/001-creating-models/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Django&lt;/strong&gt; 中，通過創建 &lt;strong&gt;Models&lt;/strong&gt; ，你可以定義的數據結構，並將其映射到資料庫。這使得資料的管理和操作變得更加簡單，同時保持了代碼的整潔性。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Python 中的列表推導式(List Comprehensions)：簡潔而強大的序列創建工具 | Python</title>
      <link>https://benzhub.github.io/post/python/013-list-comprehensions/</link>
      <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/013-list-comprehensions/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Python&lt;/strong&gt; 中， &lt;strong&gt;列表推導式（List comprehensions）&lt;/strong&gt; 是一種強大而簡潔的語法，用於快速創建列表。這種技術不僅可以讓你以更簡單的方式生成列表，還提高了代碼的可讀性。本文將深入解釋列表推導式的使用方法，並通過範例程式碼演示其優雅和效率。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Python中break、continue 與 pass：掌握控制流程的不同 | Python</title>
      <link>https://benzhub.github.io/post/python/012-break-continue-pass/</link>
      <pubDate>Sun, 28 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/012-break-continue-pass/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Python&lt;/strong&gt; 程式設計中， &lt;strong&gt;break&lt;/strong&gt; 、 &lt;strong&gt;continue&lt;/strong&gt; 和 &lt;strong&gt;pass&lt;/strong&gt; 是控制流程的關鍵字，它們在迴圈條件語句中有著不同的作用。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>迴圈(Loop)：探索程式的無窮可能 | Python</title>
      <link>https://benzhub.github.io/post/python/011-loop/</link>
      <pubDate>Sat, 27 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/011-loop/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在程式設計的世界中， &lt;strong&gt;迴圈(Loop)&lt;/strong&gt; 是一個強大的概念，它允許我們重複執行特定的程式碼塊，直到滿足特定的條件。Python 提供了多種迴圈結構，包括 &lt;strong&gt;for&lt;/strong&gt; 迴圈和 &lt;strong&gt;while&lt;/strong&gt; 迴圈，這些迴圈在不同情境中都能發揮重要作用。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title> Python 字典（Dictionary） | Python</title>
      <link>https://benzhub.github.io/post/python/015-dictionary/</link>
      <pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/015-dictionary/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Python&lt;/strong&gt; 的世界中， &lt;strong&gt;字典（Dictionary）&lt;/strong&gt; 是一種靈活的數據結構，它允許我們以鍵值對的形式組織和存儲數據。本篇文章將會介紹 &lt;strong&gt;Python&lt;/strong&gt; 字典的基本概念、操作方法以及一些實用的技巧。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>in 關鍵字，搜尋的得力助手 | Python</title>
      <link>https://benzhub.github.io/post/python/010-in-keyword/</link>
      <pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/010-in-keyword/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Python&lt;/strong&gt; 中，&lt;code&gt;in&lt;/code&gt; 關鍵字是一個強大而靈活的工具，它用於檢查某個值是否存在於特定的對象（例如列表、元組、字典、字串等）中。這個功能不僅簡化了程式碼的撰寫，還提高了代碼的可讀性。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Python 圖片壓縮 (Pillow) | Python</title>
      <link>https://benzhub.github.io/post/python/014-images-compress-size/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/014-images-compress-size/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在開發網站或應用程式時，圖片壓縮是一個重要的步驟，可以幫助提高網頁載入速度，節省流量，並改善用戶體驗。我們將介紹如何使用 &lt;strong&gt;Python&lt;/strong&gt; 進行圖片壓縮，並提供一個簡單的範例。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>條件語句 (if else Statement) | Python</title>
      <link>https://benzhub.github.io/post/python/009-if-statements/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/009-if-statements/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Python&lt;/strong&gt; 中， &lt;strong&gt;if else statement&lt;/strong&gt; 條件語句是控制程式流程的重要部分。 &lt;strong&gt;if&lt;/strong&gt; 陳述句允許我們根據特定的條件來執行或跳過程式區塊。這個功能是寫程式時不可或缺的一部分，讓我們透過以下的範例深入了解 &lt;strong&gt;if&lt;/strong&gt; 陳述句的使用方式。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>深入了解 Map 型別 | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/047-maps/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/047-maps/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;JavaScript&lt;/strong&gt; 中， &lt;strong&gt;Map&lt;/strong&gt; 是一種強大的內建物件型別，用於儲存鍵-值對。它提供了比普通的物件更豐富的功能，讓我們更靈活地處理資料。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>原始型別（Primitive Types）和引用型別（Reference Types） | Python</title>
      <link>https://benzhub.github.io/post/python/008-primitive-vs-reference/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/008-primitive-vs-reference/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Python&lt;/strong&gt; 中，變數的類型可以分為兩大類： &lt;strong&gt;原始型別（Primitive Types）&lt;/strong&gt; 和 &lt;strong&gt;引用型別（Reference Types）&lt;/strong&gt; 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>檔案傳輸 (SFTP) | Linux</title>
      <link>https://benzhub.github.io/post/linux/021-sftp/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/021-sftp/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Secure File Transfer Protocol（SFTP）&lt;/strong&gt; 是一種在安全通道上進行檔案傳輸的協定，通常基於 SSH（Secure Shell）協定。 &lt;strong&gt;SFTP&lt;/strong&gt; 提供了一個安全的方法，允許用戶在本地和遠程Linux系統之間傳輸檔案，同時保護資料傳輸的和完整。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>變數(variables)的身份（identity） | Python</title>
      <link>https://benzhub.github.io/post/python/007-identity/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/007-identity/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Python&lt;/strong&gt; 中， &lt;strong&gt;變數的身份（identity）&lt;/strong&gt; 是指變數所指向的記憶體地址。每個在 &lt;strong&gt;Python&lt;/strong&gt; 中創建的對象都有一個唯一的身份標識，這個標識是根據對象在記憶體中的位置而定的。變數的身份實際上就是這個記憶體地址。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>== 和 is 的差別 | Python</title>
      <link>https://benzhub.github.io/post/python/006-boolean-in-python/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/006-boolean-in-python/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Python&lt;/strong&gt; 中，==和is是兩個常用的比較運算符，但它們之間有著重要的區別。這篇文章將詳細解釋==和is的不同之處，並提供一些簡單的範例，以更好地理解它們的運作方式。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Django Model 中的一對一關係(One-to-one Relationships) | Django</title>
      <link>https://benzhub.github.io/post/django/003-one-to-one-relationships/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/django/003-one-to-one-relationships/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;模型之間的一對一關係(One-to-one Relationships)是其中一種，它讓我們能夠在兩個模型之間建立連結。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git 分支合併策略: 快進合併(Fast-forward) vs. 三向合併(Three-way) | Git</title>
      <link>https://benzhub.github.io/post/git/005-merge-strategy/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/005-merge-strategy/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Git 是一個分散式版本控制系統，它允許多人協同工作在同一個專案中。當開發者在不同的分支上進行工作後，需要將這些分支合併起來，這時 Git 提供了兩種主要的合併策略： &lt;strong&gt;快進合併（Fast-forward Merges）&lt;/strong&gt; 和 &lt;strong&gt;三向合併（Three-way Merges）&lt;/strong&gt; 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>使用公私鑰進行SSH連線 | Linux</title>
      <link>https://benzhub.github.io/post/linux/020-ssh/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/020-ssh/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Secure Shell（SSH）&lt;/strong&gt; 是一種安全的協定，它通常用於在本地和遠程 &lt;strong&gt;Linux&lt;/strong&gt; 系統之間建立安全的連接，並允許用戶在遠程主機上執行命令，傳輸檔案，或建立安全的通道。在本篇文章中，我們將深入探討 &lt;strong&gt;SSH&lt;/strong&gt; 中的一個重要功能 - 利用公私鑰對的來連線遠端主機。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>命令替換（Command Substitution） | Linux</title>
      <link>https://benzhub.github.io/post/linux/019-command-substitution/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/019-command-substitution/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; 作業系統經常需要進行命令行操作，而 &lt;strong&gt;Command Substitution&lt;/strong&gt; 是一項強大的功能，允許將一個命令的輸出值插入到另一個命令中，或者賦值給變數。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>常用Git指令一覽表 | Git</title>
      <link>https://benzhub.github.io/post/git/004-git-command-line/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/004-git-command-line/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;常用 &lt;strong&gt;Git&lt;/strong&gt; 指令一覽表 | Git&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git .gitignore 文件：忽略不必要的檔案和目錄 | Git</title>
      <link>https://benzhub.github.io/post/git/003-gitignore/</link>
      <pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/003-gitignore/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在使用 &lt;strong&gt;Git&lt;/strong&gt; 管理程式碼的過程中，我們經常會生成一些不需要被版本控制的檔案或目錄。這些可能包括log、臨時文件、環境特定的配置等。為了避免這些不必要的檔案被提交到版本庫，我們可以使用 .gitignore 文件。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>環境變數 （Environment） | Linux</title>
      <link>https://benzhub.github.io/post/linux/017-environment/</link>
      <pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/017-environment/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Linux&lt;/strong&gt; 中， &lt;strong&gt;環境變數（Environment）&lt;/strong&gt; 通常指的是用戶或進程執行的操作系統環境，包括各種環境變數、工作目錄、檔案許可權和其他相關的執行時條件。環境變數是一個重要的元素，它們包含了有關系統和用戶環境的信息，例如 PATH、HOME、USER 等。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>進程 （Processes） | Linux</title>
      <link>https://benzhub.github.io/post/linux/018-processes/</link>
      <pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/018-processes/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Linux&lt;/strong&gt; 中， &lt;strong&gt;進程（Processes）&lt;/strong&gt; 是系統運行的程序的實例。每個進程都是由一個或多個執行緒組成，它們在系統上運行，執行各種任務和操作。 &lt;strong&gt;Linux&lt;/strong&gt; 作業系統使用進程作為管理和執行任務的基本單位。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Permission Shortcuts (權限捷徑) | Linux</title>
      <link>https://benzhub.github.io/post/linux/016-permission-shortcuts/</link>
      <pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/016-permission-shortcuts/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 Linux 系統中，權限捷徑（Permission Shortcuts）是一種簡便的表示法，用來設置檔案或目錄的權限。這些捷徑通常使用字母或符號表示，方便使用者快速設置所需的權限。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>利用Git全局設定解決 CR LF 的問題 | Git</title>
      <link>https://benzhub.github.io/post/git/002-cr-lf/</link>
      <pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/002-cr-lf/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Git&lt;/strong&gt; 項目中， &lt;strong&gt;Windows&lt;/strong&gt; 和 &lt;strong&gt;Unix&lt;/strong&gt; 系統的換行符（Line Endings）可能會引起一些混淆和問題。這篇文章將介紹如何配置 &lt;strong&gt;Git&lt;/strong&gt; 以處理 &lt;strong&gt;CR&lt;/strong&gt; &lt;strong&gt;LF&lt;/strong&gt; 並解決相關的除錯問題。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>在 Windows、Mac 和 Linux 上安裝 Git | Git</title>
      <link>https://benzhub.github.io/post/git/001-intsall/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/001-intsall/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; 是一個強大的版本控制工具，用於跟蹤和管理項目的代碼。無論你是使用 Windows、Mac 還是 Linux，這個篇文章將為你提供在各個操作系統上安裝 &lt;strong&gt;Git&lt;/strong&gt; 的詳細步驟。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>群組權限(Group Permissions) | Linux</title>
      <link>https://benzhub.github.io/post/linux/015-group-permissions/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/015-group-permissions/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Linux&lt;/strong&gt; 中，群組權限（Group Permissions）是指對於檔案或目錄的存取權限，這些權限是針對特定群組而言的。 &lt;strong&gt;Linux&lt;/strong&gt; 的文件系統允許使用者分為不同的群組，每個群組都有其成員，檔案或目錄可以被分配給某個群組，並授予該群組對檔案或目錄的特定權限。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>遍歷物件鍵和值Object.keys()、Object.values() 、 Object.entries() | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/046-looping-objects-keys-values-entries/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/046-looping-objects-keys-values-entries/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;JavaScript&lt;/strong&gt; 中，遍歷物件的屬性是一個常見的任務。ES6 引入了一些新的方法來更輕鬆地遍歷物件的屬性，其中包括 &lt;strong&gt;Object.keys()&lt;/strong&gt; 、 &lt;strong&gt;Object.values()&lt;/strong&gt; 和 &lt;strong&gt;Object.entries()&lt;/strong&gt; 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Optional Chaining(可選鏈) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/045-optional-chaining/</link>
      <pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/045-optional-chaining/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 中的 &lt;strong&gt;Optional Chaining（可選鏈）&lt;/strong&gt; 是一種語法，用於簡化對可能為undefined或null的屬性或方法的訪問。這種語法在處理物件或陣列的多層屬性時特別有用，可以避免因為中途某一個屬性為undefined或null而導致程式出錯。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>for of 循環 &amp; entries()獲取索引 | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/044-for-of-entries/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/044-for-of-entries/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;JavaScript&lt;/strong&gt; 中， &lt;strong&gt;for&amp;hellip;of&lt;/strong&gt; 循環是一種用於迭代的語法結構。它特別適用於遍歷陣列元素。在使用 &lt;strong&gt;for&amp;hellip;of&lt;/strong&gt; 循環時，我們可以方便地獲取陣列中的每個元素，而不必關心索引的細節。此外，結合 &lt;strong&gt;entries()&lt;/strong&gt; 方法使用 &lt;strong&gt;for&amp;hellip;of&lt;/strong&gt; 循環，我們還可以獲取陣列元素的索引。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>展開運算子(Spread Operation) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/043-short-circuiting/</link>
      <pubDate>Sat, 13 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/043-short-circuiting/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 中的 &lt;strong&gt;短路運算（Short-circuit evaluation）&lt;/strong&gt; 是一種邏輯運算的行為，它基於邏輯運算符（如 &lt;strong&gt;&amp;amp;&amp;amp;&lt;/strong&gt; 和 &lt;strong&gt;||&lt;/strong&gt; ）的特性來提升開發程式碼的效率。短路運算允許在達到確定結果的情況下提前結束表達式的計算。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>展開運算子(Spread Operation) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/042-spread-operator/</link>
      <pubDate>Fri, 12 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/042-spread-operator/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 中的展開運算子是一種語法，通常用於將可迭代物件（例如陣列或字串）展開為其各個元素，或者用於合併物件的屬性。這個操作符由三個連續的點（&amp;hellip;）組成。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>後綴遞增(value&#43;&#43;) VS 前綴遞增(&#43;&#43;value) VS 使用賦值運算符遞增(value &#43;= 1) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/041-postfix-prefix/</link>
      <pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/041-postfix-prefix/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;JavaScript&lt;/strong&gt; 中的遞增或遞減運算子中，例如: &lt;strong&gt;value++&lt;/strong&gt; 、 &lt;strong&gt;++value&lt;/strong&gt; 和 &lt;strong&gt;value += 1&lt;/strong&gt; 都是用於增加變數值的操作，但它們之間有一些差異。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>解構物件(Destructuring Objects) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/040-destructuring-objects/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/040-destructuring-objects/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;JavaScript&lt;/strong&gt; 中， &lt;strong&gt;物件解構（ Object Destructuring）&lt;/strong&gt; 是一種方便的語法，用於從物件中提取屬性並將其賦值給變數。這種語法有助於簡化程式碼，尤其是在處理包含大量property的物件時。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Linked list (鏈結串列) | 資料結構&amp;演算法</title>
      <link>https://benzhub.github.io/post/javascript/data-structures--algorithms/002-linked-list/</link>
      <pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/data-structures--algorithms/002-linked-list/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;資料結構 &lt;strong&gt;鏈結串列（Linked List）&lt;/strong&gt; 是一種基本的資料結構，用於存儲一系列元素。在 &lt;strong&gt;JavaScript&lt;/strong&gt; 中，可以使用物件來實現鏈結串列。鏈結串列由節點（Node）組成，每個節點包含一個數據元素和一個指向下一個節點的連結。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>前端的重試、超時與退避策略（Backoff Strategy） | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/039-backoff-strategy/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/039-backoff-strategy/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;前端的重試、超時與退避策略（Backoff Strategy）是一種處理網路請求失敗和重試的策略。主要是在面對瞬間的網路問題或伺服器出錯的情況下，有效地減少對伺服器的大量重複請求，以避免對伺服器和網路造成過載。 &lt;strong&gt;重試、超時與退避策略的核心思想是在每次請求失敗後，逐漸增加重新請求的時間間隔。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>前端輪循(Frontend polling)技巧 | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/038-frontend-polling/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/038-frontend-polling/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;前端輪詢（Frontend Polling）&lt;/strong&gt; 是一種用於實現實時數據更新的簡單通信方法。它通過定期向伺服器發送請求來檢查是否有新的數據可用。輪詢是一種基本的客戶端-伺服器通信模型，儘管在現代開發中，使用 WebSocket 或 Server-Sent Events 等技術通常更為高效和實時，但在某些情況下仍然是有效的。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>集合(Sets) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/037-set/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/037-set/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;JavaScript&lt;/strong&gt; 中， &lt;strong&gt;Set&lt;/strong&gt; 是一種集合（Collection）數據類型，用於存儲唯一值，即集合中的元素不能重複。 &lt;strong&gt;Set&lt;/strong&gt; 是ES6（ECMAScript 2015）引入的新數據類型之一，它提供了一種簡單而有效的方法來存儲和管理一組唯一的值。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>TypeScript中的 typeof 優雅的用法 | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/004-typeof/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/004-typeof/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;typeof&lt;/strong&gt; 允許開發人員獲取變量或表達式的類型，在 &lt;strong&gt;TypeScript&lt;/strong&gt; 中，通常會先寫類型，然後宣告時再附上定義的型別， &lt;strong&gt;typeof&lt;/strong&gt; 可以讓複雜的物件直接轉化出型別，讓我們的定義型別可以更優雅&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>常用的Utility和範例 | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/005-utility/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/005-utility/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;使 &lt;strong&gt;TypeScript&lt;/strong&gt; 的其中一個關鍵特點就是它的 &lt;strong&gt;Utility&lt;/strong&gt; 。我們將介紹20個 &lt;strong&gt;TypeScript Utility&lt;/strong&gt; 和範例，並講解使用的優勢。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Lists Tuples Sets Dictionary(列表 元組 集合 字典) | Python</title>
      <link>https://benzhub.github.io/post/python/004-lists-tuples-sets-dicts/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/004-lists-tuples-sets-dicts/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; 的數據每種結構都針對特定用例而設計。我們這邊利用範例展示 &lt;strong&gt;Python&lt;/strong&gt; 的列表、元組、集合和字典，展示它們如何能夠高效處理數據。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>基本類型(Basic Types) | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/002-basic-types/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/002-basic-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; ，作為 &lt;strong&gt;JavaScript&lt;/strong&gt; 的超集，引入了靜態類型，使得程式碼更加可靠且易於維護。&lt;strong&gt;TypeScript&lt;/strong&gt; 的基本類型使開發人員可以在開發前期就發現許多隱密的型別錯誤，在大型多人協作專案中，這種明確的型別優勢就特別巨大，因此 &lt;strong&gt;Typescript&lt;/strong&gt; 在大型專案中使用率逐漸超越了 &lt;strong&gt;JavaScript&lt;/strong&gt; 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>文字類型(Literal Types) | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/001-literal-types/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/001-literal-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;TypeScript&lt;/strong&gt; 的領域中，有一個強大的功能被稱為 &lt;strong&gt;文字類型&lt;/strong&gt; ，它使開發人員能夠使用確切的值而不是通用類型。這提供了更強大的類型安全性和更精準的程式碼。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>物件類型(Objects Types) | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/003-objects-types/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/003-objects-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; 物件類型在定義程式碼中的資料結構和型別方面發揮了關鍵作用。它提供了一種創建明確定義物件模式的方式，有助於提高程式碼的可讀性和可維護性，特別在物件導向開發時，會大量使用。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>高級集合操作 (Advanced Set Operations) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/036-advanced-set-operations/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/036-advanced-set-operations/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 使用高級集合操作高效處理數據，使用Set對象進行操作，2組資料重複的元素(集合的交集)、2組資料不重複的元素(差集)和2組資料元素合併且都不重複(聯集)，在實際應用場景，運用這些高效地集合方式整理資料。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Big O &amp; 時間複雜度 &amp; 空間複雜度 介紹(Big O &amp; Time Complexity &amp; Space Complexity) | 資料結構&amp;演算法</title>
      <link>https://benzhub.github.io/post/javascript/data-structures--algorithms/001-bigo-complexity/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/data-structures--algorithms/001-bigo-complexity/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;時間和空間複雜度對於開發可擴展和高性能的程式碼影響深遠。我們將入門資料結構&amp;amp;演算法的世界，首先介紹 &lt;strong&gt;Big O&lt;/strong&gt; 表示法，並演示如何分析和優化 &lt;strong&gt;JavaScript&lt;/strong&gt; 程式碼，藉由改善程式的演算法來獲得更好的效能。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>管道(Pipes) | Linux</title>
      <link>https://benzhub.github.io/post/linux/014-pipes/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/014-pipes/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;管道(Pipes)實現了命令之間數據的流動，讓Linux 指令能夠創建強大且高效的工作流。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>輸入&amp;輸出重定向符號 (Input &amp; Output Streams) | Linux</title>
      <link>https://benzhub.github.io/post/linux/013-input-output-streams/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/013-input-output-streams/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;輸入&amp;amp;輸出重定向符號 (Input &amp;amp; Output Streams)是許多程式在運行時，輸出log或是判斷發生error的常用方式，這個章節的技巧對於日常的系統運維可說是至關重要。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>通配符和替換 (Wildcard &amp; Replacements) | Linux</title>
      <link>https://benzhub.github.io/post/linux/012-wildcard-replacement/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/012-wildcard-replacement/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Linux&lt;/strong&gt; 系統中，通配符和替換是搜尋和操作文件或目錄的強大工具。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>高級集合操作 (Advanced Set Operations) | Python</title>
      <link>https://benzhub.github.io/post/python/005-advanced-set-operations/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/python/005-advanced-set-operations/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;我們將介紹 &lt;strong&gt;Python&lt;/strong&gt; 中的高級Set(集合)操作，包括交集、聯集、差集、對稱差集等，以及如何在實際應用中充分利用這些操作。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Bash History | Linux</title>
      <link>https://benzhub.github.io/post/linux/007-bash-history/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/007-bash-history/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; 歷史紀錄你輸入的命令，提供方便的方式來查看和重複使用它們。用戶可以使用各種命令和快捷方式與此歷史交互。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>CLI Shortcuts | Linux</title>
      <link>https://benzhub.github.io/post/linux/008-cli-shortcuts-yank/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/008-cli-shortcuts-yank/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;掌握 &lt;strong&gt;Linux&lt;/strong&gt; 命令行界面（CLI）可以提高效率和靈活性。我們將介紹一系列基本的 &lt;strong&gt;Linux CLI Shortcuts&lt;/strong&gt; 方式。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Signals(信號) | Linux</title>
      <link>https://benzhub.github.io/post/linux/009-signals/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/009-signals/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; 命令行界面使用信號作為進程之間的通信，了解 &lt;strong&gt;Linux&lt;/strong&gt; 信號對於管理和與運行中的進程非常重要。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>什麼是 Mac Address 、 IP 、 Subnet Mask 和 Gateway | 網絡通訊</title>
      <link>https://benzhub.github.io/post/networking/001-macaddress-ip-subnetmask-gateway/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/networking/001-macaddress-ip-subnetmask-gateway/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在網絡通訊領域中，理解設備間通訊的基本概念非常重要。 &lt;strong&gt;Mac Address&lt;/strong&gt; 、 &lt;strong&gt;IP&lt;/strong&gt; 、 &lt;strong&gt;Subnet Mask&lt;/strong&gt; 和  &lt;strong&gt;Gateway&lt;/strong&gt; 。我們透過演示命令行深入講解各個的意義。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>什麼是Linux ? | Linux</title>
      <link>https://benzhub.github.io/post/linux/006-what-is-linux/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/006-what-is-linux/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; 是一個類似 &lt;strong&gt;Unix&lt;/strong&gt; 的操作系統內核，最初由 &lt;strong&gt;Linus Torvalds&lt;/strong&gt; 於1991年創建。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>什麼是Unix ? | Linux</title>
      <link>https://benzhub.github.io/post/linux/005-what-is-unix/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/005-what-is-unix/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Unix&lt;/strong&gt; 誕生於20世紀70年代初的貝爾實驗室，是許多操作系統的祖先， &lt;strong&gt;Unix&lt;/strong&gt; 以其穩健性、可擴展性和多用途性而聞名。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>掌握Linux文件操作: 創建和移動文件 | Linux</title>
      <link>https://benzhub.github.io/post/linux/011-creating-moving-files/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/011-creating-moving-files/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Linux&lt;/strong&gt; 命令行領域，熟練地創建和移動文件是一項基本技能。這項技能通常會是你在工作上使用 &lt;strong&gt;Linux&lt;/strong&gt; 系統時，最常使用的一個命令行。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>讀取文件(Reading Files) | Linux</title>
      <link>https://benzhub.github.io/post/linux/010-reading-files/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/linux/010-reading-files/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Linux&lt;/strong&gt; 環境中，通過命令行閱讀文件的技巧是最基本的技巧。文件閱讀是 &lt;strong&gt;Linux&lt;/strong&gt; 日常操作中最常用的命令之一 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title> this | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/032-this/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/032-this/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 中的 &lt;strong&gt;this&lt;/strong&gt; 既強大又神秘，常常讓開發人員感到困惑。我們將用範例深入探討 &lt;strong&gt;this&lt;/strong&gt; 在不同情境中的運作方式。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title> Variable Hoisting and Temporal Dead Zone | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/031-variable-hoisting/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/031-variable-hoisting/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Hoisting&lt;/strong&gt; 和 &lt;strong&gt;Temporal Dead Zone(TDZ)&lt;/strong&gt; 影響 &lt;strong&gt;JavaScript&lt;/strong&gt; 中的變量聲明和初始化。 &lt;strong&gt;var&lt;/strong&gt; . &lt;strong&gt;let&lt;/strong&gt; . &lt;strong&gt;const&lt;/strong&gt; 有各自不同的 &lt;strong&gt;Hoisting&lt;/strong&gt;  和 &lt;strong&gt;TDZ&lt;/strong&gt; 情境，這篇文章將會深入介紹這些的細節。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>display 屬性 (block &amp; inline) | CSS</title>
      <link>https://benzhub.github.io/post/htmlcss/020-display-block-inline/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/htmlcss/020-display-block-inline/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;CSS &lt;strong&gt;display&lt;/strong&gt; 屬性基本上分為兩個值： &lt;strong&gt;block&lt;/strong&gt; 和 &lt;strong&gt;inline&lt;/strong&gt; ，賦予開發人員控制HTML元素佈局和呈現的能力。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Float(浮動) | CSS</title>
      <link>https://benzhub.github.io/post/htmlcss/018-float/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/htmlcss/018-float/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; 的 &lt;strong&gt;float&lt;/strong&gt; 使開發人員能夠創建具有多個元素的布局。儘管現代佈局技術，如 &lt;strong&gt;Flexbox&lt;/strong&gt; 和 &lt;strong&gt;Grid&lt;/strong&gt; 越來越受歡迎，但理解並利用 &lt;strong&gt;float&lt;/strong&gt; 仍然至關重要。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>JavaScript作用域(Scope) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/030-javascript-scope/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/030-javascript-scope/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;作用域(Scope)代表你宣告的變數可以在哪些區域作用，  &lt;strong&gt;JavaScript&lt;/strong&gt; 新手開發人員常常會因為變數作用域在錯誤的區域使用變數，而造成許多隱密的bug。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Primitive vs. Reference Types | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/033-primitive-reference/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/033-primitive-reference/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 是一種動態且多用途的程式語言，數據基本有2種類型: &lt;strong&gt;原始類型&lt;/strong&gt; 和 &lt;strong&gt;參考類型&lt;/strong&gt; 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>定位屬性 position relative absolute | CSS</title>
      <link>https://benzhub.github.io/post/htmlcss/021-position-relative-absolute/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/htmlcss/021-position-relative-absolute/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在Web佈局上， &lt;strong&gt;CSS&lt;/strong&gt; 提供了一個強大的工具：position: relative 和 position: absolute。這兩個屬性在定位元素在文檔中的位置方面起著關鍵作用。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>淺拷貝 vs. 深拷貝 (Shallow Copy vs. Deep Copy) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/034-shallow-copy-vs-deep-copy/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/034-shallow-copy-vs-deep-copy/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;JavaScript&lt;/strong&gt; 中，複製對象和陣列是一個常見的任務，但複製的方法可能導致意外的行為。淺拷貝和深拷貝是兩種不同的方法，各自具有其優勢和用例。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>表單樣式(Form Style) | CSS</title>
      <link>https://benzhub.github.io/post/htmlcss/022-form-style/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/htmlcss/022-form-style/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; 表單樣式通常會出現在用戶登入或是輸入資料的地方，對於用戶的使用體驗有很高的影響性。本篇文章將會跟你介紹 &lt;strong&gt;HTML&amp;amp;CSS&lt;/strong&gt; 中表單的樣式設計。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>超連結(HyperLink)和按鈕(Button)(hover, active, visited, focus, cursor) | CSS</title>
      <link>https://benzhub.github.io/post/htmlcss/019-hyperlink-button/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/htmlcss/019-hyperlink-button/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;網頁中有兩個重要的用戶互動元素——超鏈接和按鈕，我們將介紹使用CSS來增強它們的外觀和互動性。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>陣列解構(Destructuring Arrays) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/035-destructuring-arrays/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/035-destructuring-arrays/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 陣列解構(Destructuring Arrays)是一個強大的功能，允許開發人員以優雅和簡潔的方式從陣列中提取值，它簡化了代碼，使其更直觀且更易讀。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>JavaScript引擎和執行的深度剖析 | JavaScript</title>
      <link>https://benzhub.github.io/post/javascript/029-javascript-engine-and-runtime/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/029-javascript-engine-and-runtime/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 引擎和運行(JavaScript Engine and Runtime)是執行和管理 &lt;strong&gt;JavaScript&lt;/strong&gt; 代碼的核心組件。我們介紹各元件的複雜性，闡明它們如何共同工作，使 &lt;strong&gt;JavaScript&lt;/strong&gt; 高效又完美的執行。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Linux or Mac 安裝 nvm(Node.js 的版本管理器) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/024-linux-or-mac-install-nvm/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/024-linux-or-mac-install-nvm/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;管理 &lt;strong&gt;Node.js&lt;/strong&gt; 版本對很多人來說是一場惡夢，但使用 &lt;strong&gt;nvm&lt;/strong&gt; （Node.js版本管理器），這個過程變得簡單而高效。我們將介紹如何在Linux和Mac OS 系統安裝 &lt;strong&gt;nvm&lt;/strong&gt; ，使他們能夠輕鬆切換 &lt;strong&gt;Node.js&lt;/strong&gt; 版本。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>事件處理(Handling Events) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/026-handling-click-events/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/026-handling-click-events/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;JavaScript&lt;/strong&gt; 中，事件驅動允許開發者創建與使用者互動的網頁。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>什麼是 nvm、npm、Node.js | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/023-whats-nvm-npm-nodejs/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/023-whats-nvm-npm-nodejs/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt; 已成為現代Web開發的基石，其生態系統包括 &lt;strong&gt;npm&lt;/strong&gt; （Node包管理器）和 &lt;strong&gt;nvm&lt;/strong&gt; （Node版本管理器）等重要工具。理解 &lt;strong&gt;Node.js&lt;/strong&gt; 、 &lt;strong&gt;npm&lt;/strong&gt; 和 &lt;strong&gt;nvm&lt;/strong&gt; 之間的關係對於乾淨的套件管理和版本控制非常重要。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>使用javascript改變CSS style | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/027-changing-css-styles/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/027-changing-css-styles/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 使開發人員能夠動態更改 &lt;strong&gt;HTML&lt;/strong&gt; 元素和修改 &lt;strong&gt;CSS&lt;/strong&gt; 樣式。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>按鍵事件處理(Handling Keypress Events) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/028-handling-keypress-events/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/028-handling-keypress-events/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;我們將在這篇文章中介紹 &lt;strong&gt;JavaScript&lt;/strong&gt; 中按鍵事件處理的方式。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>選擇元素(Selecting DOM Elements) | Javascript</title>
      <link>https://benzhub.github.io/post/javascript/025-selecting-dom-elements/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/025-selecting-dom-elements/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在DOM（文檔對象模型）中選擇元素是 &lt;strong&gt;JavaScript&lt;/strong&gt; 開發人員的基本技能。透過操作HTML元素，讓我們的網頁增加更多靈活的互動性。我們將介紹使用 &lt;strong&gt;JavaScript&lt;/strong&gt; 選擇元素的不同方法。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
