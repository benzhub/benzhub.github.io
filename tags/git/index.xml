<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on BenzHub</title>
    <link>https://benzhub.github.io/tags/git/</link>
    <description>Recent content in Git on BenzHub</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://benzhub.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入探索Git Rebase：提升你的分支合併技能 | Git</title>
      <link>https://benzhub.github.io/post/git/018-cherry-pick/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/018-cherry-pick/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在開發中，我們常常會遇到需要合併不同分支上的特定提交（commit）的情況。這時候，Git 提供了一個強大的工具，就是 &lt;code&gt;cherry-pick&lt;/code&gt;。這個指令可以讓你從其他分支中選擇單獨的提交，並將其應用到目前的分支中。讓我們一起來看看如何使用 &lt;code&gt;cherry-pick&lt;/code&gt; 這個神奇的指令吧！&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>深入探索Git Rebase：提升你的分支合併技能 | Git</title>
      <link>https://benzhub.github.io/post/git/017-rebase/</link>
      <pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/017-rebase/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Git rebase 是一個強大而又常被忽視的功能，它允許開發人員重新定義提交的歷史，提供了更加乾淨、簡潔的提交歷史。本篇將深入探討Git rebase的原理、使用方式以及常見應用場景。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git 中【三路合併】指令 (Fast-forward Merge) | Git</title>
      <link>https://benzhub.github.io/post/git/016-three-way-merge/</link>
      <pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/016-three-way-merge/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在軟體管理版本中，Git是一個極為重要且普遍使用的版本控制工具。當多個開發者在同時修改同一個檔案時，可能會導致程式碼混亂並產生衝突。而Git中的三路合併（Three-way Merges）機制，就是為了解決這種衝突而存在的工具。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git 中的「快轉合併」指令 (Fast-forward Merge) | Git</title>
      <link>https://benzhub.github.io/post/git/015-fast-forward-merge/</link>
      <pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/015-fast-forward-merge/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在Git中遇到分支合併時，其中一個概念就是「快轉合併（Fast-forward Merge）」。我們將探討這個概念，並展示如何在你的開發流程中使用它。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git Stash 暫存檔案指令 | Git</title>
      <link>https://benzhub.github.io/post/git/014-stash/</link>
      <pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/014-stash/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在開發程式的過程中，有時候可能需要立即切換到其他分支，但又不想讓目前的程式碼變得混亂。這時候，Git Stash 就是一個非常實用的工具，讓我們能夠有效地管理暫存檔案，並在需要時輕鬆地取回我們暫存的檔案。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>了解Git合併衝突：解決開發者最常見頭痛的狀況 | Git</title>
      <link>https://benzhub.github.io/post/git/013-merge-conflicts/</link>
      <pubDate>Fri, 23 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/013-merge-conflicts/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Git可以讓團隊能夠有效地協作、追蹤程式碼更動、以及管理版本控制。然而，當多個開發者同時修改相同的檔案時，就常常會引發Git合併衝突的問題發生。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git分支：有效管理開發流程的必備技巧 | Git</title>
      <link>https://benzhub.github.io/post/git/012-branchs/</link>
      <pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/012-branchs/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在程式碼管理中Git已成為管理版本的不二之選。而Git的分支功能更是其強大之處之一。分支讓開發者可以同時進行多個專案的不同功能或修復不同的bug，而不會影響到主要的程式碼庫。但是，要善用Git分支，我們需要了解何時以及如何使用它們。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>掌握Git中的「標籤」：讓你的程式碼版本控制更得心應手！ | Git</title>
      <link>https://benzhub.github.io/post/git/011-tagging/</link>
      <pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/011-tagging/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在軟體開發的世界中，追蹤程式碼的版本是一個關鍵性的任務。在大型專案中，可能會有數十甚至數百個不同的版本，為了方便管理和溝通，我們需要一種有效的方式來標識每個版本。這就是Git tag (標籤)的好用之處！&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git 回到過去歷史的 Commit | Git</title>
      <link>https://benzhub.github.io/post/git/010-checking-out-a-commit/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/010-checking-out-a-commit/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在Git中 checkout 是一個強大的功能，它讓你可以輕鬆地回到過去的某個特定 commit，查看當時的程式碼狀態，這對於除錯、比較不同版本的程式碼、或者修復錯誤都非常有用。現在讓我們來深入了解如何使用這個功能。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git Alias: 提高效率的神奇工具(自定義git指令) | Git</title>
      <link>https://benzhub.github.io/post/git/009-alias/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/009-alias/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在使用 Git 進行開發時，經常會遇到需要輸入長長的指令的情況，例如 git commit -m &amp;ldquo;commit message&amp;rdquo; 或者 git push origin master。而 Git Alias 是一個極為方便的功能，可以讓我們將這些常用的指令簡化成自定義的縮寫，從而提高開發效率。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git中Log輸出format功能 | Git</title>
      <link>https://benzhub.github.io/post/git/008-output-format/</link>
      <pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/008-output-format/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在日常的軟體開發中，Git 是一個不可或缺的版本控制工具。而其中的 Log（記錄）功能更是開發者們經常使用的一項功能。透過查看 Log，我們可以清楚地了解到專案的歷史紀錄、每一次提交的詳細信息以及作者的資訊等。然而，Git 提供了一些格式化 Log 輸出的功能，使得我們可以更加靈活地呈現這些信息。接下來，讓我們一起來探討一下 Git 中 Formatting the Log Output 的最常用功能吧！&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>在不破壞現有commits的情況下，找回被誤刪的檔案 | Git</title>
      <link>https://benzhub.github.io/post/git/007-restore-file-in-commit/</link>
      <pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/007-restore-file-in-commit/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在使用 Git 進行版本控制時，有時你可能會出現不小心刪除某些檔案，這時需要將某個檔案還原到指定的commit(提交)版本。但是你想在不破壞整個文件夾的commit(提交)版本下，還原某一些檔案，我們將介紹如何使用 Git 命令來找回一些你不小心刪除的檔案。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>理解 Git 中的「已暫存」與「未暫存」的概念 | Git</title>
      <link>https://benzhub.github.io/post/git/006-staged-and-unstaged/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/006-staged-and-unstaged/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 Git 中，有一個重要的概念是「已暫存」（Staged）和「未暫存」（Unstaged）。這兩個概念對於有效管理和追蹤你的專案變更至關重要。在本文中，我將解釋這兩個概念，並提供一些簡單的示例來幫助你更好地理解它們。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git 分支合併策略: 快進合併(Fast-forward) vs. 三向合併(Three-way) | Git</title>
      <link>https://benzhub.github.io/post/git/005-merge-strategy/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/005-merge-strategy/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Git 是一個分散式版本控制系統，它允許多人協同工作在同一個專案中。當開發者在不同的分支上進行工作後，需要將這些分支合併起來，這時 Git 提供了兩種主要的合併策略： &lt;strong&gt;快進合併（Fast-forward Merges）&lt;/strong&gt; 和 &lt;strong&gt;三向合併（Three-way Merges）&lt;/strong&gt; 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>常用Git指令一覽表 | Git</title>
      <link>https://benzhub.github.io/post/git/004-git-command-line/</link>
      <pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/004-git-command-line/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;常用 &lt;strong&gt;Git&lt;/strong&gt; 指令一覽表 | Git&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Git .gitignore 文件：忽略不必要的檔案和目錄 | Git</title>
      <link>https://benzhub.github.io/post/git/003-gitignore/</link>
      <pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/003-gitignore/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在使用 &lt;strong&gt;Git&lt;/strong&gt; 管理程式碼的過程中，我們經常會生成一些不需要被版本控制的檔案或目錄。這些可能包括log、臨時文件、環境特定的配置等。為了避免這些不必要的檔案被提交到版本庫，我們可以使用 .gitignore 文件。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>利用Git全局設定解決 CR LF 的問題 | Git</title>
      <link>https://benzhub.github.io/post/git/002-cr-lf/</link>
      <pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/002-cr-lf/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;Git&lt;/strong&gt; 項目中， &lt;strong&gt;Windows&lt;/strong&gt; 和 &lt;strong&gt;Unix&lt;/strong&gt; 系統的換行符（Line Endings）可能會引起一些混淆和問題。這篇文章將介紹如何配置 &lt;strong&gt;Git&lt;/strong&gt; 以處理 &lt;strong&gt;CR&lt;/strong&gt; &lt;strong&gt;LF&lt;/strong&gt; 並解決相關的除錯問題。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>在 Windows、Mac 和 Linux 上安裝 Git | Git</title>
      <link>https://benzhub.github.io/post/git/001-intsall/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/git/001-intsall/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; 是一個強大的版本控制工具，用於跟蹤和管理項目的代碼。無論你是使用 Windows、Mac 還是 Linux，這個篇文章將為你提供在各個操作系統上安裝 &lt;strong&gt;Git&lt;/strong&gt; 的詳細步驟。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
