<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on BenzHub</title><link>https://benzhub.github.io/tags/git/</link><description>Recent content in git on BenzHub</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 19 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://benzhub.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Alias: 提高效率的神奇工具(自定義git指令) | Git</title><link>https://benzhub.github.io/post/git/009-alias/</link><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/git/009-alias/</guid><description>&lt;blockquote>
&lt;p>在使用 Git 進行開發時，經常會遇到需要輸入長長的指令的情況，例如 git commit -m &amp;ldquo;commit message&amp;rdquo; 或者 git push origin master。而 Git Alias 是一個極為方便的功能，可以讓我們將這些常用的指令簡化成自定義的縮寫，從而提高開發效率。&lt;/p>
&lt;/blockquote></description></item><item><title>Git中Log輸出format功能 | Git</title><link>https://benzhub.github.io/post/git/008-output-format/</link><pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/git/008-output-format/</guid><description>&lt;blockquote>
&lt;p>在日常的軟體開發中，Git 是一個不可或缺的版本控制工具。而其中的 Log（記錄）功能更是開發者們經常使用的一項功能。透過查看 Log，我們可以清楚地了解到專案的歷史紀錄、每一次提交的詳細信息以及作者的資訊等。然而，Git 提供了一些格式化 Log 輸出的功能，使得我們可以更加靈活地呈現這些信息。接下來，讓我們一起來探討一下 Git 中 Formatting the Log Output 的最常用功能吧！&lt;/p>
&lt;/blockquote></description></item><item><title>在不破壞現有commits的情況下，找回被誤刪的檔案 | Git</title><link>https://benzhub.github.io/post/git/007-restore-file-in-commit/</link><pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/git/007-restore-file-in-commit/</guid><description>&lt;blockquote>
&lt;p>在使用 Git 進行版本控制時，有時你可能會出現不小心刪除某些檔案，這時需要將某個檔案還原到指定的commit(提交)版本。但是你想在不破壞整個文件夾的commit(提交)版本下，還原某一些檔案，我們將介紹如何使用 Git 命令來找回一些你不小心刪除的檔案。&lt;/p>
&lt;/blockquote></description></item><item><title>理解 Git 中的「已暫存」與「未暫存」的概念 | Git</title><link>https://benzhub.github.io/post/git/006-staged-and-unstaged/</link><pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/git/006-staged-and-unstaged/</guid><description>&lt;blockquote>
&lt;p>在 Git 中，有一個重要的概念是「已暫存」（Staged）和「未暫存」（Unstaged）。這兩個概念對於有效管理和追蹤你的專案變更至關重要。在本文中，我將解釋這兩個概念，並提供一些簡單的示例來幫助你更好地理解它們。&lt;/p>
&lt;/blockquote></description></item><item><title>Git 分支合併策略: 快進合併(Fast-forward) vs. 三向合併(Three-way) | Git</title><link>https://benzhub.github.io/post/git/005-merge-strategy/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/git/005-merge-strategy/</guid><description>&lt;blockquote>
&lt;p>Git 是一個分散式版本控制系統，它允許多人協同工作在同一個專案中。當開發者在不同的分支上進行工作後，需要將這些分支合併起來，這時 Git 提供了兩種主要的合併策略： &lt;strong>快進合併（Fast-forward Merges）&lt;/strong> 和 &lt;strong>三向合併（Three-way Merges）&lt;/strong> 。&lt;/p>
&lt;/blockquote></description></item><item><title>常用Git指令一覽表 | Git</title><link>https://benzhub.github.io/post/git/004-git-command-line/</link><pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/git/004-git-command-line/</guid><description>&lt;blockquote>
&lt;p>常用 &lt;strong>Git&lt;/strong> 指令一覽表 | Git&lt;/p>
&lt;/blockquote></description></item><item><title>Git .gitignore 文件：忽略不必要的檔案和目錄 | Git</title><link>https://benzhub.github.io/post/git/003-gitignore/</link><pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/git/003-gitignore/</guid><description>&lt;blockquote>
&lt;p>在使用 &lt;strong>Git&lt;/strong> 管理程式碼的過程中，我們經常會生成一些不需要被版本控制的檔案或目錄。這些可能包括log、臨時文件、環境特定的配置等。為了避免這些不必要的檔案被提交到版本庫，我們可以使用 .gitignore 文件。&lt;/p>
&lt;/blockquote></description></item><item><title>利用Git全局設定解決 CR LF 的問題 | Git</title><link>https://benzhub.github.io/post/git/002-cr-lf/</link><pubDate>Fri, 19 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/git/002-cr-lf/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>Git&lt;/strong> 項目中， &lt;strong>Windows&lt;/strong> 和 &lt;strong>Unix&lt;/strong> 系統的換行符（Line Endings）可能會引起一些混淆和問題。這篇文章將介紹如何配置 &lt;strong>Git&lt;/strong> 以處理 &lt;strong>CR&lt;/strong> &lt;strong>LF&lt;/strong> 並解決相關的除錯問題。&lt;/p>
&lt;/blockquote></description></item><item><title>在 Windows、Mac 和 Linux 上安裝 Git | Git</title><link>https://benzhub.github.io/post/git/001-intsall/</link><pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/git/001-intsall/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Git&lt;/strong> 是一個強大的版本控制工具，用於跟蹤和管理項目的代碼。無論你是使用 Windows、Mac 還是 Linux，這個篇文章將為你提供在各個操作系統上安裝 &lt;strong>Git&lt;/strong> 的詳細步驟。&lt;/p>
&lt;/blockquote></description></item></channel></rss>