<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on BenzHub</title><link>https://benzhub.github.io/tags/python/</link><description>Recent content in python on BenzHub</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 31 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://benzhub.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Django Choice Fields - 在模型中添加選擇欄位 | Django</title><link>https://benzhub.github.io/post/django/002-choice-fields/</link><pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/django/002-choice-fields/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>Django&lt;/strong> 模型中，有時候我們需要限制某一個字段的值，只允許它在一組特定的選項中取值。這時， &lt;strong>Django&lt;/strong> 的 &lt;strong>Choice Fields&lt;/strong> 就派上用場了。&lt;/p>
&lt;/blockquote></description></item><item><title>創建模型(Models) | Django</title><link>https://benzhub.github.io/post/django/001-creating-models/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/django/001-creating-models/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>Django&lt;/strong> 中，通過創建 &lt;strong>Models&lt;/strong> ，你可以定義的數據結構，並將其映射到資料庫。這使得資料的管理和操作變得更加簡單，同時保持了代碼的整潔性。&lt;/p>
&lt;/blockquote></description></item><item><title>Python 中的列表推導式(List Comprehensions)：簡潔而強大的序列創建工具 | Python</title><link>https://benzhub.github.io/post/python/013-list-comprehensions/</link><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/013-list-comprehensions/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>Python&lt;/strong> 中， &lt;strong>列表推導式（List comprehensions）&lt;/strong> 是一種強大而簡潔的語法，用於快速創建列表。這種技術不僅可以讓你以更簡單的方式生成列表，還提高了代碼的可讀性。本文將深入解釋列表推導式的使用方法，並通過範例程式碼演示其優雅和效率。&lt;/p>
&lt;/blockquote></description></item><item><title>Python中break、continue 與 pass：掌握控制流程的不同 | Python</title><link>https://benzhub.github.io/post/python/012-break-continue-pass/</link><pubDate>Sun, 28 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/012-break-continue-pass/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>Python&lt;/strong> 程式設計中， &lt;strong>break&lt;/strong> 、 &lt;strong>continue&lt;/strong> 和 &lt;strong>pass&lt;/strong> 是控制流程的關鍵字，它們在迴圈條件語句中有著不同的作用。&lt;/p>
&lt;/blockquote></description></item><item><title>迴圈(Loop)：探索程式的無窮可能 | Python</title><link>https://benzhub.github.io/post/python/011-loop/</link><pubDate>Sat, 27 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/011-loop/</guid><description>&lt;blockquote>
&lt;p>在程式設計的世界中， &lt;strong>迴圈(Loop)&lt;/strong> 是一個強大的概念，它允許我們重複執行特定的程式碼塊，直到滿足特定的條件。Python 提供了多種迴圈結構，包括 &lt;strong>for&lt;/strong> 迴圈和 &lt;strong>while&lt;/strong> 迴圈，這些迴圈在不同情境中都能發揮重要作用。&lt;/p>
&lt;/blockquote></description></item><item><title> Python 字典（Dictionary） | Python</title><link>https://benzhub.github.io/post/python/015-dictionary/</link><pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/015-dictionary/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>Python&lt;/strong> 的世界中， &lt;strong>字典（Dictionary）&lt;/strong> 是一種靈活的數據結構，它允許我們以鍵值對的形式組織和存儲數據。本篇文章將會介紹 &lt;strong>Python&lt;/strong> 字典的基本概念、操作方法以及一些實用的技巧。&lt;/p>
&lt;/blockquote></description></item><item><title>in 關鍵字，搜尋的得力助手 | Python</title><link>https://benzhub.github.io/post/python/010-in-keyword/</link><pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/010-in-keyword/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>Python&lt;/strong> 中，&lt;code>in&lt;/code> 關鍵字是一個強大而靈活的工具，它用於檢查某個值是否存在於特定的對象（例如列表、元組、字典、字串等）中。這個功能不僅簡化了程式碼的撰寫，還提高了代碼的可讀性。&lt;/p>
&lt;/blockquote></description></item><item><title>Python 圖片壓縮 (Pillow) | Python</title><link>https://benzhub.github.io/post/python/014-images-compress-size/</link><pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/014-images-compress-size/</guid><description>&lt;blockquote>
&lt;p>在開發網站或應用程式時，圖片壓縮是一個重要的步驟，可以幫助提高網頁載入速度，節省流量，並改善用戶體驗。我們將介紹如何使用 &lt;strong>Python&lt;/strong> 進行圖片壓縮，並提供一個簡單的範例。&lt;/p>
&lt;/blockquote></description></item><item><title>條件語句 (if else Statement) | Python</title><link>https://benzhub.github.io/post/python/009-if-statements/</link><pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/009-if-statements/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>Python&lt;/strong> 中， &lt;strong>if else statement&lt;/strong> 條件語句是控制程式流程的重要部分。 &lt;strong>if&lt;/strong> 陳述句允許我們根據特定的條件來執行或跳過程式區塊。這個功能是寫程式時不可或缺的一部分，讓我們透過以下的範例深入了解 &lt;strong>if&lt;/strong> 陳述句的使用方式。&lt;/p>
&lt;/blockquote></description></item><item><title>原始型別（Primitive Types）和引用型別（Reference Types） | Python</title><link>https://benzhub.github.io/post/python/008-primitive-vs-reference/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/008-primitive-vs-reference/</guid><description>&lt;blockquote>
&lt;/blockquote>
&lt;p>在 &lt;strong>Python&lt;/strong> 中，變數的類型可以分為兩大類： &lt;strong>原始型別（Primitive Types）&lt;/strong> 和 &lt;strong>引用型別（Reference Types）&lt;/strong> 。&lt;/p></description></item><item><title>變數(variables)的身份（identity） | Python</title><link>https://benzhub.github.io/post/python/007-identity/</link><pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/007-identity/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>Python&lt;/strong> 中， &lt;strong>變數的身份（identity）&lt;/strong> 是指變數所指向的記憶體地址。每個在 &lt;strong>Python&lt;/strong> 中創建的對象都有一個唯一的身份標識，這個標識是根據對象在記憶體中的位置而定的。變數的身份實際上就是這個記憶體地址。&lt;/p>
&lt;/blockquote></description></item><item><title>== 和 is 的差別 | Python</title><link>https://benzhub.github.io/post/python/006-boolean-in-python/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/006-boolean-in-python/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>Python&lt;/strong> 中，==和is是兩個常用的比較運算符，但它們之間有著重要的區別。這篇文章將詳細解釋==和is的不同之處，並提供一些簡單的範例，以更好地理解它們的運作方式。&lt;/p>
&lt;/blockquote></description></item><item><title>Django Model 中的一對一關係(One-to-one Relationships) | Django</title><link>https://benzhub.github.io/post/django/003-one-to-one-relationships/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/django/003-one-to-one-relationships/</guid><description>&lt;blockquote>
&lt;p>模型之間的一對一關係(One-to-one Relationships)是其中一種，它讓我們能夠在兩個模型之間建立連結。&lt;/p>
&lt;/blockquote></description></item><item><title>Lists Tuples Sets Dictionary(列表 元組 集合 字典) | Python</title><link>https://benzhub.github.io/post/python/004-lists-tuples-sets-dicts/</link><pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/004-lists-tuples-sets-dicts/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Python&lt;/strong> 的數據每種結構都針對特定用例而設計。我們這邊利用範例展示 &lt;strong>Python&lt;/strong> 的列表、元組、集合和字典，展示它們如何能夠高效處理數據。&lt;/p>
&lt;/blockquote></description></item><item><title>高級集合操作 (Advanced Set Operations) | Python</title><link>https://benzhub.github.io/post/python/005-advanced-set-operations/</link><pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/005-advanced-set-operations/</guid><description>&lt;blockquote>
&lt;p>我們將介紹 &lt;strong>Python&lt;/strong> 中的高級Set(集合)操作，包括交集、聯集、差集、對稱差集等，以及如何在實際應用中充分利用這些操作。&lt;/p>
&lt;/blockquote></description></item><item><title>String Formatting(字串格式化) | Python</title><link>https://benzhub.github.io/post/python/003-string-formatting/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/003-string-formatting/</guid><description>&lt;blockquote>
&lt;p>字串格式化是 &lt;strong>Python&lt;/strong> 中一個強大的功能，允許開發人員創建動態且可讀的輸出。無論你是構建用戶界面、記錄消息還是生成報告，理解 &lt;strong>Python&lt;/strong> 字串格式化技術是非常重要的。&lt;/p>
&lt;/blockquote></description></item><item><title>Variables(變數) | Python</title><link>https://benzhub.github.io/post/python/002-variables/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/002-variables/</guid><description>&lt;blockquote>
&lt;p>變量是任何程式語言的基礎， &lt;strong>Python&lt;/strong> 也不例外。它們充當存儲和管理數據的容器，使開發人員能夠在程序中操縱信息。&lt;/p>
&lt;/blockquote></description></item><item><title>安裝&amp;啟動JupyterLab | Python</title><link>https://benzhub.github.io/post/python/001-install-jupyterlab/</link><pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/python/001-install-jupyterlab/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Python JupyterLab&lt;/strong> 是一個功能強大的開源基於 &lt;strong>Web&lt;/strong> 的 &lt;strong>Python&lt;/strong> 交互式計算環境。它允許用戶創建並共享包含實時代碼、方程式、可視化和敘述文本的文檔。由於其多功能性和易用性， &lt;strong>JupyterLab&lt;/strong> 支持各種語言並在數據科學、機器學習和科學計算中被廣泛使用。&lt;/p>
&lt;/blockquote></description></item></channel></rss>