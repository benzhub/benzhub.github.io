<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>typescript on BenzHub</title><link>https://benzhub.github.io/tags/typescript/</link><description>Recent content in typescript on BenzHub</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 06 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://benzhub.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScript中的 typeof 優雅的用法 | TypeScript</title><link>https://benzhub.github.io/post/javascript/typescript/004-typeof/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/typescript/004-typeof/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>typeof&lt;/strong> 允許開發人員獲取變量或表達式的類型，在 &lt;strong>TypeScript&lt;/strong> 中，通常會先寫類型，然後宣告時再附上定義的型別， &lt;strong>typeof&lt;/strong> 可以讓複雜的物件直接轉化出型別，讓我們的定義型別可以更優雅&lt;/p>
&lt;/blockquote></description></item><item><title>常用的Utility和範例 | TypeScript</title><link>https://benzhub.github.io/post/javascript/typescript/005-utility/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/typescript/005-utility/</guid><description>&lt;blockquote>
&lt;p>使 &lt;strong>TypeScript&lt;/strong> 的其中一個關鍵特點就是它的 &lt;strong>Utility&lt;/strong> 。我們將介紹20個 &lt;strong>TypeScript Utility&lt;/strong> 和範例，並講解使用的優勢。&lt;/p>
&lt;/blockquote></description></item><item><title>基本類型(Basic Types) | TypeScript</title><link>https://benzhub.github.io/post/javascript/typescript/002-basic-types/</link><pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/typescript/002-basic-types/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>TypeScript&lt;/strong> ，作為 &lt;strong>JavaScript&lt;/strong> 的超集，引入了靜態類型，使得程式碼更加可靠且易於維護。&lt;strong>TypeScript&lt;/strong> 的基本類型使開發人員可以在開發前期就發現許多隱密的型別錯誤，在大型多人協作專案中，這種明確的型別優勢就特別巨大，因此 &lt;strong>Typescript&lt;/strong> 在大型專案中使用率逐漸超越了 &lt;strong>JavaScript&lt;/strong> 。&lt;/p>
&lt;/blockquote></description></item><item><title>文字類型(Literal Types) | TypeScript</title><link>https://benzhub.github.io/post/javascript/typescript/001-literal-types/</link><pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/typescript/001-literal-types/</guid><description>&lt;blockquote>
&lt;p>在 &lt;strong>TypeScript&lt;/strong> 的領域中，有一個強大的功能被稱為 &lt;strong>文字類型&lt;/strong> ，它使開發人員能夠使用確切的值而不是通用類型。這提供了更強大的類型安全性和更精準的程式碼。&lt;/p>
&lt;/blockquote></description></item><item><title>物件類型(Objects Types) | TypeScript</title><link>https://benzhub.github.io/post/javascript/typescript/003-objects-types/</link><pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/typescript/003-objects-types/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>TypeScript&lt;/strong> 物件類型在定義程式碼中的資料結構和型別方面發揮了關鍵作用。它提供了一種創建明確定義物件模式的方式，有助於提高程式碼的可讀性和可維護性，特別在物件導向開發時，會大量使用。&lt;/p>
&lt;/blockquote></description></item></channel></rss>