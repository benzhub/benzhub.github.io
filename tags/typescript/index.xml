<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on BenzHub</title>
    <link>https://benzhub.github.io/tags/typescript/</link>
    <description>Recent content in Typescript on BenzHub</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 18 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://benzhub.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>定義React組件的屬性類型 | React</title>
      <link>https://benzhub.github.io/post/react/009-defining-component-props-types/</link>
      <pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/react/009-defining-component-props-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在開發React應用程序時，使用TypeScript可以大大提高代碼的可讀性和可維護性。其中一個關鍵部分是定義組件的屬性類型，這樣可以在開發過程中即時發現錯誤，並且在多人協作中更嚴謹。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title> TypeScript中使用Omit來排除 interface property | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/006-omit-remove-property/</link>
      <pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/006-omit-remove-property/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在使用TypeScript開發應用程式時，我們常常需要定義新的 Interface 來描述物件的形狀和結構。有時候，我們可能需要在一個介面中排除某些屬性，而不是直接複製所有屬性到一個新的 Interface。這時，TypeScript提供了一個非常方便的工具：&lt;code&gt;Omit&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>TypeScript中的 typeof 優雅的用法 | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/004-typeof/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/004-typeof/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;typeof&lt;/strong&gt; 允許開發人員獲取變量或表達式的類型，在 &lt;strong&gt;TypeScript&lt;/strong&gt; 中，通常會先寫類型，然後宣告時再附上定義的型別， &lt;strong&gt;typeof&lt;/strong&gt; 可以讓複雜的物件直接轉化出型別，讓我們的定義型別可以更優雅&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>常用的Utility和範例 | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/005-utility/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/005-utility/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;使 &lt;strong&gt;TypeScript&lt;/strong&gt; 的其中一個關鍵特點就是它的 &lt;strong&gt;Utility&lt;/strong&gt; 。我們將介紹20個 &lt;strong&gt;TypeScript Utility&lt;/strong&gt; 和範例，並講解使用的優勢。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>基本類型(Basic Types) | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/002-basic-types/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/002-basic-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; ，作為 &lt;strong&gt;JavaScript&lt;/strong&gt; 的超集，引入了靜態類型，使得程式碼更加可靠且易於維護。&lt;strong&gt;TypeScript&lt;/strong&gt; 的基本類型使開發人員可以在開發前期就發現許多隱密的型別錯誤，在大型多人協作專案中，這種明確的型別優勢就特別巨大，因此 &lt;strong&gt;Typescript&lt;/strong&gt; 在大型專案中使用率逐漸超越了 &lt;strong&gt;JavaScript&lt;/strong&gt; 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>文字類型(Literal Types) | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/001-literal-types/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/001-literal-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;TypeScript&lt;/strong&gt; 的領域中，有一個強大的功能被稱為 &lt;strong&gt;文字類型&lt;/strong&gt; ，它使開發人員能夠使用確切的值而不是通用類型。這提供了更強大的類型安全性和更精準的程式碼。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>物件類型(Objects Types) | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/003-objects-types/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/003-objects-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; 物件類型在定義程式碼中的資料結構和型別方面發揮了關鍵作用。它提供了一種創建明確定義物件模式的方式，有助於提高程式碼的可讀性和可維護性，特別在物件導向開發時，會大量使用。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
