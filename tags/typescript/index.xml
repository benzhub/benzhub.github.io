<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on BenzHub</title>
    <link>https://benzhub.github.io/tags/typescript/</link>
    <description>Recent content in Typescript on BenzHub</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 06 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://benzhub.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>設計模式類別 | Design Pattern</title>
      <link>https://benzhub.github.io/post/design-pattern/002-design-pattern-classification/</link>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/design-pattern/002-design-pattern-classification/</guid>
      <description>&lt;h2 id=&#34;設計模式主要可以分為三大類別&#34;&gt;設計模式主要可以分為三大類別：&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://benzhub.github.io/img/design-pattern/002-Design-Pattern-classification/1.svg&#34; alt=&#34;classification.svg&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;創建型模式（Creational Design Patterns）&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;這些模式專注於物件的創建過程。它們將物件的實例化過程抽象化，有助於使系統不依賴於物件的創建、組合和表示方式。&lt;/li&gt;&#xA;&lt;li&gt;創建型模式提供一種在隱藏創建邏輯的同時創建物件的方法，而不是直接使用 new 運算符。&lt;/li&gt;&#xA;&lt;li&gt;這在決定特定使用案例需要創建哪些物件時提供了更大的靈活性。&lt;/li&gt;&#xA;&lt;li&gt;一些常見的創建型模式包括:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;單例模式&lt;/li&gt;&#xA;&lt;li&gt;工廠方法模式&lt;/li&gt;&#xA;&lt;li&gt;抽象工廠模式&lt;/li&gt;&#xA;&lt;li&gt;建造者模式&lt;/li&gt;&#xA;&lt;li&gt;原型模式&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;結構型模式（Structural Design Patterns）&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;結構型模式關注類別和物件的組合方式。&lt;/li&gt;&#xA;&lt;li&gt;它們有助於使用類別和物件形成大型結構，同時確保結構具有可擴展性、效率和可維護性。&lt;/li&gt;&#xA;&lt;li&gt;結構型模式著重於簡化設計，方法是識別實體之間的關係，並將它們組織成一個有凝聚力的結構。&lt;/li&gt;&#xA;&lt;li&gt;它們通過組合接口或實現來促進軟體設計。&lt;/li&gt;&#xA;&lt;li&gt;一些常見的結構型模式包括:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;適配器模式&lt;/li&gt;&#xA;&lt;li&gt;橋接模式&lt;/li&gt;&#xA;&lt;li&gt;組合模式&lt;/li&gt;&#xA;&lt;li&gt;裝飾器模式&lt;/li&gt;&#xA;&lt;li&gt;外觀模式&lt;/li&gt;&#xA;&lt;li&gt;享元模式&lt;/li&gt;&#xA;&lt;li&gt;代理模式。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;行為型模式（Behavioral Design Patterns）&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;行為型模式負責物件之間的有效溝通和職責分配。&lt;/li&gt;&#xA;&lt;li&gt;它們關注物件如何相互作用和通信，以及如何在系統中組織控制流程。&lt;/li&gt;&#xA;&lt;li&gt;行為型模式定義了物件之間通信的協議，並幫助分配職責，以確保系統高效、可維護和可擴展。&lt;/li&gt;&#xA;&lt;li&gt;通過促進鬆散耦合和關注點分離，行為型模式提高了軟體系統的靈活性和適應性。&lt;/li&gt;&#xA;&lt;li&gt;一些廣泛使用的行為型模式包括&#xA;&lt;ol&gt;&#xA;&lt;li&gt;責任鏈模式&lt;/li&gt;&#xA;&lt;li&gt;命令模式&lt;/li&gt;&#xA;&lt;li&gt;解釋器模式&lt;/li&gt;&#xA;&lt;li&gt;迭代器模式&lt;/li&gt;&#xA;&lt;li&gt;中介者模式&lt;/li&gt;&#xA;&lt;li&gt;備忘錄模式&lt;/li&gt;&#xA;&lt;li&gt;觀察者模式&lt;/li&gt;&#xA;&lt;li&gt;狀態模式&lt;/li&gt;&#xA;&lt;li&gt;策略模式&lt;/li&gt;&#xA;&lt;li&gt;模板方法模式&lt;/li&gt;&#xA;&lt;li&gt;訪問者模式。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;行為型設計模式在物件間通訊和責任分配的角色&#34;&gt;行為型設計模式在物件間通訊和責任分配的角色&lt;/h3&gt;&#xA;&lt;p&gt;行為型設計模式主要關注物件之間的有效溝通和責任分配。它們著重於物件如何交互和通信，以及如何在系統中組織控制流程&lt;strong&gt;1&lt;/strong&gt;。換句話說，它們定義了物件之間通訊的協議，並協助分配職責，以確保系統的效率、可維護性和可擴展性。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://benzhub.github.io/img/design-pattern/002-Design-Pattern-classification/2.svg&#34; alt=&#34;responsibility.svg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;行為型設計模式通過以下方式在物件間通訊和責任分配中扮演重要角色：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;促進鬆散耦合&lt;/strong&gt;: 行為型設計模式鼓勵物件之間的鬆散耦合，這意味著物件之間的依賴性降低。 鬆散耦合的系統更容易維護和修改，因為對一個物件的更改不太可能影響其他物件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;定義清晰的通訊協議&lt;/strong&gt;: 行為型設計模式建立物件之間通訊的明確協議。 這些協議有助於確保物件可以有效地交互，而無需了解彼此的內部細節。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;分配責任&lt;/strong&gt;: 行為型設計模式幫助開發者將責任分配給適當的物件。 這可以提高系統的模組化程度和可重用性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://benzhub.github.io/img/design-pattern/002-Design-Pattern-classification/3.svg&#34; alt=&#34;role.svg&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;一些常用的行為型設計模式及其在物件間通訊和責任分配中的角色包括&#34;&gt;一些常用的行為型設計模式及其在物件間通訊和責任分配中的角色包括：&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;責任鏈模式&lt;/strong&gt;: 允許將請求沿著物件鏈傳遞，直到找到可以處理該請求的物件。 這有助於避免將發送者與接收者耦合在一起。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;命令模式&lt;/strong&gt;: 將請求封裝成物件，允許參數化客戶端物件、將請求排隊或記錄請求，以及支援可撤銷的操作。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;觀察者模式&lt;/strong&gt;: 定義物件之間一對多的依賴關係，當一個物件的狀態發生改變時，所有依賴於它的物件都會收到通知。 這有助於物件之間保持同步，而無需緊密耦合。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;策略模式&lt;/strong&gt;: 定義了一系列演算法，並將每個演算法封裝起來，使它們可以互換。 這允許在運行時選擇不同的演算法，從而提高系統的靈活性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;中介者模式&lt;/strong&gt;: 用一個中介物件來封裝一系列物件的交互。 中介者使各個物件不需要顯式地相互引用，從而使其耦合鬆散，而且可以獨立地改變它們之間的交互。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;總結，行為型設計模式提供了一套強大的機制，用於管理物件之間的通訊和責任分配。通過採用這些模式，開發者可以構建更加靈活、可維護和可擴展的軟體系統。&lt;/p&gt;</description>
    </item>
    <item>
      <title>為什麼要使用設計模式&amp;設計模式常見錯誤 | Design Pattern</title>
      <link>https://benzhub.github.io/post/design-pattern/001-design-pattern-introduction/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/design-pattern/001-design-pattern-introduction/</guid>
      <description>&lt;h2 id=&#34;設計模式常見問題&#34;&gt;設計模式常見問題&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 什麼是設計模式?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;設計模式是一種針對軟體設計中常見問題的可重複使用解決方案,特別適用於物件導向程式設計 (OOP) 的環境中。這些模式提供了解決特定類型問題的模板或結構,使開發人員更容易編寫可維護且高效的程式碼。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. 設計模式的歷史淵源為何?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;設計模式的概念最初由建築師 Christopher Alexander 在 1970 年代提出。在他所著的《建築模式語言》一書中,他探討了如何識別和應用某些模式來解決建築設計中的重複問題。這一概念後來被一群電腦科學家（即「四人幫」,Gang of Four,GoF）引入並改編為軟體工程中的方法。1994 年,Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 發表了經典著作《設計模式：可重複使用的物件導向軟體的元素》,在書中提出了 23 種物件導向程式設計的設計模式,這本書成為了設計模式領域的里程碑,並推廣了設計模式在軟體開發中的概念。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://benzhub.github.io/img/design-pattern/001-Design-Pattern-introduction/1.svg&#34; alt=&#34;why.svg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;3. 為什麼要使用設計模式?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用設計模式的原因如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;可重複使用性&lt;/strong&gt;：設計模式為常見問題提供了經過驗證的解決方案,減少從頭開始解決問題所需的時間和精力,並促進了軟體系統的可重複使用性和模組化。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;改進溝通&lt;/strong&gt;：設計模式為開發人員提供了一種共同的詞彙和理解,能更有效地溝通設計決策和解決方案。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;最佳實務&lt;/strong&gt;：設計模式封裝了經驗豐富的軟體開發人員的最佳實務,讓新手可以從他們的專業知識中學習。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;可維護性&lt;/strong&gt;：設計模式的實作通常會產生更易於維護的程式碼,使未來的更新、除錯和擴展更簡單。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;更容易解決問題&lt;/strong&gt;：設計模式提供了一種結構化的方法來解決問題,幫助開發人員將複雜問題分解為更小、更易於管理的組件。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://benzhub.github.io/img/design-pattern/001-Design-Pattern-introduction/2.svg&#34; alt=&#34;notice.svg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;4. 使用設計模式時有哪些注意事項?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用設計模式需要謹慎,不應將其視為萬靈丹。應在適合的問題情境時應用它們,並考慮其使用的權衡和潛在後果。以下是一些需要考慮的因素：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;情境差異&lt;/strong&gt;：設計模式適用於特定情境,在一種情境下有效的模式在另一種情境中可能不適用,盲目應用可能導致設計不良。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;過度工程化&lt;/strong&gt;：有時開發人員可能即使在有更簡單的解決方案時也使用設計模式,這可能會導致過度工程化,使程式碼更加複雜且難以維護。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;效能影響&lt;/strong&gt;：設計模式可能引入額外的抽象或間接層,這可能會影響效能。開發人員應仔細考慮使用模式的好處是否超過任何潛在的效能損失。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;需求變化&lt;/strong&gt;：有時設計模式可能無法適應需求或系統的未來變化。隨著專案發展和需求變化,最初適合的設計模式可能變得不再適用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;5. 實際應用設計模式的例子?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;在一個社交媒體平台中，可以使用觀察者模式來實作通知系統。當用戶發佈新內容時，註冊的觀察者（如電子郵件、簡訊和應用程式內通知）會自動收到通知。這種模式使通知系統模組化且易於擴展，適合處理多種通知方式的應用情境。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;6. 什麼是策略模式?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;策略模式是一種行為型設計模式,它定義了一系列演算法,將每個演算法封裝起來,並使它們可以互相替換。策略模式使演算法獨立於使用它的客戶端而變化。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;7. 策略模式的優點有哪些?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;策略模式的優點包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;消除條件語句&lt;/strong&gt;：策略模式可以避免使用大量條件語句來選擇不同演算法。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;易於擴展&lt;/strong&gt;：可以輕鬆地添加新的策略,而無需修改現有程式碼。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;符合開放/封閉原則&lt;/strong&gt;：可以擴展軟體實體的行為,而無需修改現有程式碼。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://benzhub.github.io/img/design-pattern/001-Design-Pattern-introduction/3.svg&#34; alt=&#34;common.svg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;8. 除了策略模式,還有哪些常用的設計模式?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;除了策略模式外,還有許多其他常用的設計模式,例如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;單例模式&lt;/li&gt;&#xA;&lt;li&gt;工廠模式&lt;/li&gt;&#xA;&lt;li&gt;觀察者模式&lt;/li&gt;&#xA;&lt;li&gt;裝飾器模式&lt;/li&gt;&#xA;&lt;li&gt;適配器模式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;每個設計模式都有其特定的應用場景和優缺點,開發者需根據具體情況選擇合適的模式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>定義React組件的屬性類型 | React</title>
      <link>https://benzhub.github.io/post/react/009-defining-component-props-types/</link>
      <pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/react/009-defining-component-props-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在開發React應用程序時，使用TypeScript可以大大提高代碼的可讀性和可維護性。其中一個關鍵部分是定義組件的屬性類型，這樣可以在開發過程中即時發現錯誤，並且在多人協作中更嚴謹。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title> TypeScript中使用Omit來排除 interface property | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/006-omit-remove-property/</link>
      <pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/006-omit-remove-property/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在使用TypeScript開發應用程式時，我們常常需要定義新的 Interface 來描述物件的形狀和結構。有時候，我們可能需要在一個介面中排除某些屬性，而不是直接複製所有屬性到一個新的 Interface。這時，TypeScript提供了一個非常方便的工具：&lt;code&gt;Omit&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>TypeScript中的 typeof 優雅的用法 | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/004-typeof/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/004-typeof/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;typeof&lt;/strong&gt; 允許開發人員獲取變量或表達式的類型，在 &lt;strong&gt;TypeScript&lt;/strong&gt; 中，通常會先寫類型，然後宣告時再附上定義的型別， &lt;strong&gt;typeof&lt;/strong&gt; 可以讓複雜的物件直接轉化出型別，讓我們的定義型別可以更優雅&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>常用的Utility和範例 | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/005-utility/</link>
      <pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/005-utility/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;使 &lt;strong&gt;TypeScript&lt;/strong&gt; 的其中一個關鍵特點就是它的 &lt;strong&gt;Utility&lt;/strong&gt; 。我們將介紹20個 &lt;strong&gt;TypeScript Utility&lt;/strong&gt; 和範例，並講解使用的優勢。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>基本類型(Basic Types) | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/002-basic-types/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/002-basic-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; ，作為 &lt;strong&gt;JavaScript&lt;/strong&gt; 的超集，引入了靜態類型，使得程式碼更加可靠且易於維護。&lt;strong&gt;TypeScript&lt;/strong&gt; 的基本類型使開發人員可以在開發前期就發現許多隱密的型別錯誤，在大型多人協作專案中，這種明確的型別優勢就特別巨大，因此 &lt;strong&gt;Typescript&lt;/strong&gt; 在大型專案中使用率逐漸超越了 &lt;strong&gt;JavaScript&lt;/strong&gt; 。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>文字類型(Literal Types) | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/001-literal-types/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/001-literal-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;TypeScript&lt;/strong&gt; 的領域中，有一個強大的功能被稱為 &lt;strong&gt;文字類型&lt;/strong&gt; ，它使開發人員能夠使用確切的值而不是通用類型。這提供了更強大的類型安全性和更精準的程式碼。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>物件類型(Objects Types) | TypeScript</title>
      <link>https://benzhub.github.io/post/javascript/typescript/003-objects-types/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://benzhub.github.io/post/javascript/typescript/003-objects-types/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; 物件類型在定義程式碼中的資料結構和型別方面發揮了關鍵作用。它提供了一種創建明確定義物件模式的方式，有助於提高程式碼的可讀性和可維護性，特別在物件導向開發時，會大量使用。&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
