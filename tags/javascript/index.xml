<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on BenzHub</title><link>https://benzhub.github.io/tags/javascript/</link><description>Recent content in javascript on BenzHub</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 27 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://benzhub.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Boolean Logical Operators(布林邏輯操作)-Javascript</title><link>https://benzhub.github.io/post/javascript/008-boolean-logic/</link><pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/008-boolean-logic/</guid><description>&lt;blockquote>
&lt;p>布林邏輯運算子是 JavaScript 中製定決策和控制程式流程的基本工具。這些運算子允許您建立複雜的條件並有效地處理不同的情境。讓我們探索 JavaScript 中一些基本的布林邏輯運算子。&lt;/p>
&lt;/blockquote></description></item><item><title>Equality Operators(嚴格等式VS鬆散等式)-Javascript</title><link>https://benzhub.github.io/post/javascript/007-equality-operators/</link><pubDate>Tue, 19 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/007-equality-operators/</guid><description>&lt;blockquote>
&lt;p>理解如何比較值是程式設計的基礎。我們探討了等值運算子 &lt;strong>==&lt;/strong> 和 &lt;strong>===&lt;/strong> 的微妙差異，用範例理解它們的內在細節差異。我們將解開鬆散和嚴格等值比較，當你在編寫更複雜的程式碼中的會有巨大幫助。無論你是初學者還是經驗豐富的開發人員，掌握等值運算子是發揮 &lt;strong>JavaScript&lt;/strong> 完整潛力的關鍵一步。&lt;/p>
&lt;/blockquote></description></item><item><title>Truthy and Falsy(真值、假值)-Javascript</title><link>https://benzhub.github.io/post/javascript/006-truthy-and-falsy/</link><pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/006-truthy-and-falsy/</guid><description>&lt;blockquote>
&lt;p>了解真值（例如，字串、數字）和假值（例如，null、undefined）對於編寫高效且清晰的程式碼至關重要。透過實際範例列出常見的真值(Truthy)和假值(Falsy)場景，很好的幫助你寫出高效的程式碼。&lt;/p>
&lt;/blockquote></description></item><item><title>Type Conversion(型別轉換)-Javascript</title><link>https://benzhub.github.io/post/javascript/005-type-conversion/</link><pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/005-type-conversion/</guid><description>&lt;blockquote>
&lt;p>理解 &lt;strong>JavaScript&lt;/strong> 如何進行型別轉換和強制轉換非常重要。這就是為什麼一個字串 &lt;code>5&lt;/code> 可以變成數字 5 的原因。在這篇文章中，我們將示範 &lt;strong>JavaScript&lt;/strong> 如何進行這些轉換，讓你簡單的理解運作的原理。&lt;/p>
&lt;/blockquote></description></item><item><title>if else Statements(條件式)-Javascript</title><link>https://benzhub.github.io/post/javascript/004-if-else-statements/</link><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/004-if-else-statements/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>JavaScript&lt;/strong> 的 &lt;strong>if&lt;/strong> 和 &lt;strong>else&lt;/strong> 語法就像程式碼中的決策者。它允許你的程式根據條件選擇不同的路徑。想像一下它就像是一個岔路口：如果一個條件為真，就走一條路；如果為假，就走另一條路。&lt;/p>
&lt;/blockquote></description></item><item><title>Template Literals(字串模板)-Javascript</title><link>https://benzhub.github.io/post/javascript/003-template-literals/</link><pubDate>Fri, 15 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/003-template-literals/</guid><description>&lt;blockquote>
&lt;p>Template Literals(字串模板)，在Javascript中我們會很常用使用到，在字串(string)中帶入變數(variable)的技巧一定要熟練的掌握&lt;/p>
&lt;/blockquote></description></item><item><title>Operator Precedence(運算子優先序)-Javascript</title><link>https://benzhub.github.io/post/javascript/002-operator-precedence/</link><pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/002-operator-precedence/</guid><description>&lt;blockquote>
&lt;p>Operator Precedence(運算子優先序)，在Javascript中大部分我們的運算都跟我們數學中的方式很像，都是先乘除後加減的方式在運作&lt;/p>
&lt;/blockquote></description></item><item><title>Variables(變數)-Javascript</title><link>https://benzhub.github.io/post/javascript/001-variables/</link><pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate><guid>https://benzhub.github.io/post/javascript/001-variables/</guid><description>&lt;blockquote>
&lt;p>變數(Variables)是任何程式的基礎石，作為儲存和管理資料的容器。與其他語言中的資料類型不同，JavaScript 變數(Variables)是動態類型的。這種靈活性可以使Javascript開發人員能夠創造更多具有靈活性的程式碼。&lt;/p>
&lt;/blockquote></description></item></channel></rss>